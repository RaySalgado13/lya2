PARSER_BEGIN(Analizador_Angel)
    	public class Analizador_Angel
	{
		public static void main (String[] args) throws ParseException{
		Analizador_Angel
	 anLex = new Analizador_Angel
	(System.in);
		anLex.unaExpresion();		
		System.out.println("Analisis Terminado.");
		}
}
PARSER_END(Analizador_Angel)

TOKEN: { <CLASS: "class" >	{System.out.println("clase: " + image);}	}
TOKEN: { <PUBLIC: "public" >	{System.out.println("public: " + image);}	}
TOKEN: { <STATIC: "static" > {System.out.println("static: " + image);}	}
TOKEN: { <VOID: "void" > {System.out.println("void: " + image);}	}
TOKEN: { <MAIN: "main" >	{System.out.println("main: " + image);}	}
TOKEN: { <STRING: "String" >	{System.out.println("String: " + image);}	}
TOKEN: { <RETURN: "return" > {System.out.println("return : " + image);}	}
TOKEN: { <EXTENDS: "extends" > {System.out.println("extends: " + image);}	}
TOKEN: { <INT: "int" > {System.out.println("int: " + image);}	}
TOKEN: { <BOOLEAN: "boolean" >	{System.out.println("boolean: " + image);}	}
TOKEN: { <FLOAT: "float" >	{System.out.println("float: " + image);}}
TOKEN: { <IF: "if" >	{System.out.println("if: " + image);}}
TOKEN: { <ELSE: "else" >	{System.out.println("else: " + image);}	}
TOKEN: { <WHILE :"while"> {System.out.println("while: " + image);}	}
TOKEN: { <TRUE: "true"> 	{System.out.println("true: " + image);}	}
TOKEN: { <FALSE: "false">	{System.out.println("false: " + image);}	}
TOKEN: { <THIS: "this">	{System.out.println("this : " + image);}	}
TOKEN: { <NEW: "new"> {System.out.println("next: " + image);}	}
TOKEN: { <PRINT: "System.out.println"> {System.out.println("print: " + image);}	}

TOKEN: { <OPCORCHETE: "[" > 	{System.out.println("Abre corchete: " + image);}	}
TOKEN: { <CLCORCHETE: "]"	> 	{System.out.println("Cierra corchete: " + image);}	}
TOKEN: { <OPPARENTESIS: "("	> 	{System.out.println("Abre parentesis: " + image);}	}
TOKEN: { <CLPARENTESIS: ")"	> 	{System.out.println("Cierra parentesis: " + image);}	}
TOKEN: { <OPLLAVES: "{"	> 	{System.out.println("Abre llaves: " + image);}	}
TOKEN: { <CLLLAVES: "}"	> 	{System.out.println("Cierra llaves: "  + image);}	}
TOKEN: { <FINSENTENCIA: ";"	> 	{System.out.println("Fin de sentencia: " + image);}	}


TOKEN: {<NUMERO: ["0"-"9"] >	{System.out.println("numero: " + image);}	}
TOKEN: { <ENTERO: (<NUMERO>)+ > {System.out.println("numero: " + image);}	}
TOKEN: { <PUNTO: "." >	}
TOKEN: { <REALES: (<NUMERO>)+ <PUNTO> (<NUMERO>)+ > {System.out.println("Real: " + image);}	}

TOKEN: { <IGUAL: "=" > {System.out.println("Igual: " + image);}	}
TOKEN: { <OPAND: "&&" >	{System.out.println("AND: " + image);}	}
TOKEN: { <MENORQUE: "<" >	{System.out.println("Menor: " + image);}	}
TOKEN: { <MAYORQUE: ">" >	{System.out.println("Mayor: " + image);}	}
TOKEN: { <MAYORIGUALQUE: ">=" >	{System.out.println("Mayor igual: " + image); }	}
TOKEN: { <MENORIGUALQUE: "<=" >	{System.out.println("Menor igual: " + image); }	}
TOKEN: { <SUMA: "+" > {System.out.println("Suma: " + image);}	}
TOKEN: { <RESTA: "-" > {System.out.println("Resta: " + image);}	}
TOKEN: { <MULTIPLICACION: "*" > {System.out.println("Multiplicacion: : " + image);}	}
TOKEN: { <DIVISION: "/" > {System.out.println("Division: " + image);}	}
TOKEN: { <NEGACION: "!" > {System.out.println("Negacion: " + image);}	}


TOKEN: { <MAYUSCULA:  ["A"-"Z"] >	{System.out.println("Identificador : " + image); }	}
TOKEN: { <MINUSCULA:  ["a"-"z"] >	{System.out.println("Identificador : " + image); }	}
TOKEN: { <GUIONES: "_" >	}
TOKEN: { <IDENTIFICADOR: ( ( <MAYUSCULA> | <MINUSCULA>) (<MAYUSCULA> | <MINUSCULA> | <NUMERO> | <GUIONES> )+ ) > {System.out.println("Identificador : " + image); }	}


SKIP: 
{
	" " | "\t" | "\n" | "\r"
}

SKIP: {<~[]>{}}

void unaExpresion(): {}
{
	( <CLASS> | <PUBLIC> | <STATIC> | <VOID> | <MAIN> | <STRING> | <RETURN> | <EXTENDS> | <INT> | <BOOLEAN> | <FLOAT> | <IF> | <ELSE> | <WHILE> | <TRUE> | 
	<FALSE> | <THIS> | <NEW> | <PRINT> | 
	<OPCORCHETE> | <CLCORCHETE> | <OPPARENTESIS> | <CLPARENTESIS> | <OPLLAVES> | <CLLLAVES> | <FINSENTENCIA> | 
	<NUMERO> | <ENTERO> | <REALES> | <PUNTO> | <IGUAL> | <OPAND> | <MENORQUE> | <MAYORQUE> | <MAYORIGUALQUE> | <MENORIGUALQUE> | 
	<SUMA> | <RESTA> | <MULTIPLICACION> | <DIVISION> | <NEGACION>| <MAYUSCULA> | <MINUSCULA> | <IDENTIFICADOR> )+ <EOF>
}