PARSER_BEGIN(Main)
	public class Main{
		public static void main (String[] args) throws ParseException{
		Main anSint = new Main(System.in);
		anSint.Program();		
		System.out.println("Analisis Terminado.");
	}
}
PARSER_END(Main)

TOKEN: { <CLASS: "class" >	{System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <PUBLIC: "public" >	{System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <STATIC: "static" > {System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <VOID: "void" > {System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <MAIN: "main" >	{System.out.println(matchedToken.beginLine +  " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <STRING: "String" >	{System.out.println(matchedToken.beginLine +  " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <RETURN: "return" > {System.out.println(matchedToken.beginLine +  " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <EXTENDS: "extends" > {System.out.println(matchedToken.beginLine +  " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <INT: "int" > {System.out.println(matchedToken.beginLine +  " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <BOOLEAN: "boolean" >	{System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}	}
TOKEN: { <FLOAT: "float" >	{System.out.println(matchedToken.beginLine + " : Se encontro la palabra reservada: " + image);}}
TOKEN: { <IF: "if" >	{System.out.println(matchedToken.beginLine + " Se encontro la palabra reservada: " + image);}}
TOKEN: { <ELSE: "else" >	{System.out.println(matchedToken.beginLine + " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <WHILE :"while"> {System.out.println(matchedToken.beginLine + " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <TRUE: "true"> 	{System.out.println(matchedToken.beginLine + " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <FALSE: "false">	{System.out.println(matchedToken.beginLine +  " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <THIS: "this">	{System.out.println(matchedToken.beginLine +  " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <NEW: "new"> {System.out.println(matchedToken.beginLine +  " Se encontro la palabra reservada: " + image);}	}
TOKEN: { <PRINT: "System.out.println"> {System.out.println(matchedToken.beginLine + " Se encontro la palabra reservada: " + image);}	}

TOKEN: { <OPCORCHETE: "[" > 	{System.out.println(matchedToken.beginLine + " Se encontro el signo de agrupamiento: " + image);}	}
TOKEN: { <CLCORCHETE: "]"	> 	{System.out.println(matchedToken.beginLine +  " Se encontro el signo de agrupamiento: " + image);}	}
TOKEN: { <OPPARENTESIS: "("	> 	{System.out.println(matchedToken.beginLine +  " Se encontro el signo de agrupamiento: " + image);}	}
TOKEN: { <CLPARENTESIS: ")"	> 	{System.out.println(matchedToken.beginLine +  " Se encontro el signo de agrupamiento: " + image);}	}
TOKEN: { <OPLLAVES: "{"	> 	{System.out.println(matchedToken.beginLine + " Se encontro el signo de agrupamiento: " + image);}	}
TOKEN: { <CLLLAVES: "}"	> 	{System.out.println(matchedToken.beginLine + " Se encontro el signo de agrupamiento: "  + image);}	}
TOKEN: { <FINSENTENCIA: ";"	> 	{System.out.println(matchedToken.beginLine + " Se encontro el signo de agrupamiento: " + image);}	}


TOKEN: { <ENTERO: (<NUMERO>)+ > {System.out.println(matchedToken.beginLine + " numero: " + image);}	}
TOKEN: {<NUMERO: ["0"-"9"] >		}
TOKEN: { <PUNTO: "." > {System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <REALES: (<NUMERO>)+ <PUNTO> (<NUMERO>)+ > {System.out.println(matchedToken.beginLine + " Real: " + image);}	}

TOKEN: { <IGUAL: "=" > {System.out.println(matchedToken.beginLine +  " Se encontro el operador: " + image);}	}
TOKEN: { <OPAND: "&&" >	{System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <MENORQUE: "<" >	{System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <MAYORQUE: ">" >	{System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <MAYORIGUALQUE: ">=" >	{System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image); }	}
TOKEN: { <MENORIGUALQUE: "<=" >	{System.out.println(matchedToken.beginLine +  " Se encontro el operador: " + image); }	}
TOKEN: { <SUMA: "+" > {System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <RESTA: "-" > {System.out.println(matchedToken.beginLine +  " Se encontro el operador: " + image);}	}
TOKEN: { <MULTIPLICACION: "*" > {System.out.println( matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <DIVISION: "/" > {System.out.println(matchedToken.beginLine +  " Se encontro el operador: " + image);}	}
TOKEN: { <NEGACION: "!" > {System.out.println(matchedToken.beginLine +  " Se encontro el operador: " + image);}	}
TOKEN: { <COMA: "," > {System.out.println(matchedToken.beginLine + " SSe encontro el operador: " + image);}	}


TOKEN: { <GUIONES: "_" > {System.out.println(matchedToken.beginLine + " Se encontro el operador: " + image);}	}
TOKEN: { <IDENTIFICADOR: ( ( <MAYUSCULA> | <MINUSCULA>) (<MAYUSCULA> | <MINUSCULA> | <NUMERO> | <GUIONES> )* ) > {System.out.println(matchedToken.beginLine + " Se encontro un dentificador: " + image); }	}
TOKEN: { <MAYUSCULA:  ["A"-"Z"] >}
TOKEN: { <MINUSCULA:  ["a"-"z"] >}

TOKEN:{
	<IDINCORRECTO: (<NUMERO> | <GUIONES> | <RESTA>)+ <IDENTIFICADOR> > {System.out.println(matchedToken.beginLine + " Error en línea "+matchedToken.beginLine+" Identifier incorrecto: "+image);}
	|
	<REALINCORRECTO: ((<NUMERO>)+ <PUNTO>) | (<PUNTO> (<NUMERO>)+)> {System.out.println(matchedToken.beginLine +  " Error en línea "+matchedToken.beginLine+" Expression incorrecta "+image);}

}

MORE :{
	"//": SINGLECOMMENT
}

<SINGLECOMMENT> SKIP:
{
    <SALTOLINEA:"\n">: DEFAULT
}

<SINGLECOMMENT> MORE:{
    <~[]>
}

MORE :{
	"/*": MULTIPLECOMMENT
}

<MULTIPLECOMMENT> SKIP:
{
    <ENDCOMMENT:"*/">: DEFAULT
}

<MULTIPLECOMMENT> MORE:
{
    <~[]>
}


SKIP: 
{
	" " | "\t" | "\n" | "\r"
}

SPECIAL_TOKEN:
{
	<NOVALIDO: ~[] > {System.out.println(">"+matchedToken.beginLine+":"+image+": Caracter no válido");}
}

void Program(): {}
{
	MainClass() ( ClassDeclaration() )* <EOF>
}

void MainClass (): {}
{
	<CLASS> Identifier() 
		<OPLLAVES> 
			<PUBLIC> <STATIC> <VOID> <MAIN> 
			<OPPARENTESIS> 
				<STRING> <OPCORCHETE> <CLCORCHETE> Identifier() 
			<CLPARENTESIS> 
			<OPLLAVES> 
				Statement()
			<CLLLAVES> 
		<CLLLAVES>
}

void ClassDeclaration(): {}
{
	<CLASS> Identifier() ( <EXTENDS> Identifier() )? 
	<OPLLAVES>
		( VarDeclaration() )* (MethodDeclaration() )* 
	<CLLLAVES>
}

void VarDeclaration(): {}
{
	Type() Identifier() <FINSENTENCIA>
}

void MethodDeclaration(): {}
{
	<PUBLIC> Type() Identifier()
	<OPPARENTESIS>
		( Type() Identifier() (	<COMA> Type() Identifier() )* )?
	<CLPARENTESIS>
	<OPLLAVES>
		 (LOOKAHEAD(4) VarDeclaration() )* (Statement() )* <RETURN> Expression() <FINSENTENCIA> 
	<CLLLAVES>
}

void Type (): {}
{
		LOOKAHEAD(2) <INT>  <OPCORCHETE> <CLCORCHETE>
	|	LOOKAHEAD(2) <REALES> <OPCORCHETE> <CLCORCHETE>
	|	<BOOLEAN>
	|	<INT> 
	| 	<REALES>
	|	Identifier()
}

void Statement(): {}
{
		<OPLLAVES> ( Statement() )* <CLLLAVES>
	|	<IF> <OPPARENTESIS> Expression() <CLPARENTESIS> Statement() <ELSE> Statement()
	|	<WHILE> <OPPARENTESIS> Expression() <CLPARENTESIS> Statement()
	|	<PRINT> <OPPARENTESIS> Expression() <CLPARENTESIS> <FINSENTENCIA>
	|	LOOKAHEAD(4)<IDENTIFICADOR> <IGUAL> Expression() <FINSENTENCIA>
	|	<IDENTIFICADOR> <OPCORCHETE> Expression() <CLCORCHETE> <IGUAL> Expression() <FINSENTENCIA>
}


void Expression(): {}
{
		<ENTERO> Expression1()
	| <TRUE> Expression1()
	| <FALSE> Expression1()
	| Identifier() Expression1()
	| <THIS> Expression1()
	| LOOKAHEAD(4)<NEW> <INT> <OPCORCHETE> Expression() <CLCORCHETE> Expression1()
	| <NEW> Identifier() <OPPARENTESIS> <CLPARENTESIS> Expression1()
	| <NEGACION> Expression() Expression1()
	| <OPPARENTESIS> Expression() Expression1()
}

void Expression1(): {}
{
	(	<OPAND> | <MENORQUE> | <SUMA> | <RESTA> | <MULTIPLICACION> 	) Expression() Expression1()
	|	<OPCORCHETE> Expression() <CLCORCHETE>  Expression1()
	|	<PUNTO> Identifier() <OPPARENTESIS> ( Expression() ( <COMA> Expression() )* )? <CLPARENTESIS> Expression1()
}

void Identifier():{}
{
	<IDENTIFICADOR>
}