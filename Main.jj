
	options {
	Ignore_Case = false;
	STATIC=false;
	}


PARSER_BEGIN(Main) 
	import java.util.HashMap;

	public class Main{

		public static HashMap<Integer, Simbolo> tablaSimbolos = new HashMap<Integer, Simbolo>();

		public static void main (String[] args) throws ParseException{
			Main anSint = new Main(System.in);
			anSint.Program();		

			for(Object s:tablaSimbolos.values()){
				System.out.println(s);
			}

			System.out.println("Analisis Terminado.");
		}

		public boolean validate(Simbolo simbol){
			String lexema = simbol.lexema;
			for(Simbolo s : tablaSimbolos.values()){
				if(s.lexema.equals(lexema)){
					return false;
				}
			}
			return true;
		}

		public class Simbolo{
			
			public String lexema; //lexema, nombre del identificador
			public String tipoDato; //tipo de dato, int, float, void
			public String categoria; //categoria, clase, funcion, variable, arreglo
			public int tamanio; //tama√±o del arreglo, cantidad de parametros de la funcion
			
			public Simbolo(){

			}

			public Simbolo(String lexema, String tipoDato, String categoria, int tamanio){
				this.lexema = lexema;
				this.tipoDato = tipoDato;
				this.categoria = categoria;
				this.tamanio = tamanio;
			}

			@Override
			public String toString(){
				return lexema+"\t\t"+tipoDato+"\t\t"+categoria+"\t\t"+tamanio;
			}

		}

	}
PARSER_END(Main)

TOKEN: { <CLASS: "class" >}
TOKEN: { <PUBLIC: "public" >}
TOKEN: { <STATIC: "static" >}
TOKEN: { <VOID: "void" >}
TOKEN: { <MAIN: "main" >}
TOKEN: { <STRING: "String" >}
TOKEN: { <RETURN: "return" >}
TOKEN: { <EXTENDS: "extends" >}
TOKEN: { <INT: "int" >}
TOKEN: { <BOOLEAN: "boolean" >}
TOKEN: { <FLOAT: "float" >}
TOKEN: { <IF: "if" >}
TOKEN: { <ELSE: "else" >}
TOKEN: { <WHILE :"while">}
TOKEN: { <TRUE: "true">}
TOKEN: { <FALSE: "false">}
TOKEN: { <THIS: "this">}
TOKEN: { <NEW: "new">}
TOKEN: { <PRINT: "System.out.println">}
TOKEN: { <LENGTH: "length"> }
TOKEN: { <OPCORCHETE: "[" >}
TOKEN: { <CLCORCHETE: "]"	>}
TOKEN: { <OPPARENTESIS: "("	>}
TOKEN: { <CLPARENTESIS: ")"	>}
TOKEN: { <OPLLAVES: "{"	> }
TOKEN: { <CLLLAVES: "}"	> }
TOKEN: { <FINSENTENCIA: ";"	>}


TOKEN: { <ENTERO: (<NUMERO>)+ >}
TOKEN: {<NUMERO: ["0"-"9"] >		}
TOKEN: { <PUNTO: "." > }
TOKEN: { <REALES: (<NUMERO>)+ <PUNTO> (<NUMERO>)+ >}

TOKEN: { <IGUAL: "=" >}
TOKEN: { <OPAND: "&&" >}
TOKEN: { <MENORQUE: "<" >}
TOKEN: { <MAYORQUE: ">" >}
TOKEN: { <MAYORIGUALQUE: ">=" >	}
TOKEN: { <MENORIGUALQUE: "<=" >	}
TOKEN: { <SUMA: "+" > }
TOKEN: { <RESTA: "-" > }
TOKEN: { <MULTIPLICACION: "*" >}
TOKEN: { <DIVISION: "/" > }
TOKEN: { <NEGACION: "!" > }
TOKEN: { <COMA: "," > }


TOKEN: { <GUIONES: "_" >}
TOKEN: { <IDENTIFICADOR: ( ( <MAYUSCULA> | <MINUSCULA>) (<MAYUSCULA> | <MINUSCULA> | <NUMERO> | <GUIONES> )* ) >}
TOKEN: { <MAYUSCULA:  ["A"-"Z"] >}
TOKEN: { <MINUSCULA:  ["a"-"z"] >}

TOKEN:{
	<IDINCORRECTO: (<NUMERO> | <GUIONES> | <RESTA>)+ <IDENTIFICADOR> >
	|
	<REALINCORRECTO: ((<NUMERO>)+ <PUNTO>) | (<PUNTO> (<NUMERO>)+)>

}

MORE :{
	"//": SINGLECOMMENT
}

<SINGLECOMMENT> SKIP:
{
    <SALTOLINEA:"\n">: DEFAULT
}

<SINGLECOMMENT> MORE:{
    <~[]>
}

MORE :{
	"/*": MULTIPLECOMMENT
}

<MULTIPLECOMMENT> SKIP:
{
    <ENDCOMMENT:"*/">: DEFAULT
}

<MULTIPLECOMMENT> MORE:
{
    <~[]>
}


SKIP: 
{
	" " | "\t" | "\n" | "\r"
}

SPECIAL_TOKEN:
{
	<NOVALIDO: ~[] >
}

void Program(): {}
{
	MainClass() ( LOOKAHEAD(2) ClassDeclaration() )* <EOF>
}

void MainClass (): {}
{
	<CLASS> Identifier("void","class",0) 
		<OPLLAVES> 
			<PUBLIC> <STATIC> <VOID> <MAIN> 
			<OPPARENTESIS> 
				<STRING> <OPCORCHETE> <CLCORCHETE> Identifier("String","array", 0) 
			<CLPARENTESIS> 
			<OPLLAVES> 
				Statement()
			<CLLLAVES> 
		<CLLLAVES>
}

void ClassDeclaration(): {}
{
	<CLASS> Identifier("void","class", 0) ( <EXTENDS> <IDENTIFICADOR> )? 
	<OPLLAVES>
		( VarDeclaration() )* (MethodDeclaration() )* 
	<CLLLAVES>
}

void VarDeclaration(): {String tipo;}
{
	tipo = Type() L(tipo) <FINSENTENCIA>
}

void L(String tipo): {String id;}
{
	Identifier(tipo,"variable", 0) LP(tipo)	
}

void LP(String tipo): {String id;}
{
	( LOOKAHEAD(2) <COMA> 
	Identifier(tipo,"variable", 0) {
	} LP(tipo) )*
}

void MethodDeclaration(): {String tipo; Simbolo simbolo;}
{
	( LOOKAHEAD(2) 
	<PUBLIC> tipo = Type() simbolo = Identifier(tipo,"method",0)
	<OPPARENTESIS>
		( tipo = Type() Identifier(tipo,"variable",0){
			tablaSimbolos.get(simbolo.hashCode()).tamanio = 1;
			
		} 
		(	<COMA> tipo = Type() Identifier(tipo, "variable",0){
			tablaSimbolos.get(simbolo.hashCode()).tamanio += 1;
		} )* )*)?
	<CLPARENTESIS>
	<OPLLAVES>
		 (LOOKAHEAD(2) VarDeclaration() )* (Statement() )* <RETURN> Expression() <FINSENTENCIA> 
	<CLLLAVES>
}

String Type (): {String tipo;}
{
	(	
			LOOKAHEAD(2) <INT>  <OPCORCHETE> <CLCORCHETE> {tipo = "int";}
		|	LOOKAHEAD(2) <FLOAT> <OPCORCHETE> <CLCORCHETE> {tipo = "float";}
		|	<BOOLEAN> {tipo = "boolean";}
		|	<INT> {tipo = "int";}
		| 	<FLOAT> {tipo = "float";}
		|	<IDENTIFICADOR>{tipo = token.image;}
	) {return tipo;}
} 


void Statement(): {}
{
		<OPLLAVES> ( Statement() )* <CLLLAVES>
	|	<IF> <OPPARENTESIS> Expression() <CLPARENTESIS> Statement() <ELSE> Statement()
	|	<WHILE> <OPPARENTESIS> Expression() <CLPARENTESIS> Statement()
	|	<PRINT> <OPPARENTESIS> Expression() <CLPARENTESIS> <FINSENTENCIA>
	|	LOOKAHEAD(2) <IDENTIFICADOR> <IGUAL> Expression() <FINSENTENCIA>
	|	LOOKAHEAD(2) <IDENTIFICADOR> <OPCORCHETE> Expression() <CLCORCHETE> <IGUAL> Expression() <FINSENTENCIA>
}


void Expression(): {}
{
		<ENTERO> Expression1()
	| 	<REALES> Expression1()
	| <TRUE> Expression1()
	| <FALSE> Expression1()
	| <IDENTIFICADOR> Expression1()
	| <THIS> Expression1()
	| LOOKAHEAD(2)<NEW> <INT> <OPCORCHETE> Expression() <CLCORCHETE> Expression1()
	| <NEW> <IDENTIFICADOR> <OPPARENTESIS> <CLPARENTESIS> Expression1()
	| <NEGACION> Expression() Expression1()
	| <OPPARENTESIS> Expression() <CLPARENTESIS> Expression1()
}

void Expression1(): {}
{

	(    
		(	<OPAND> | <MENORQUE> | <SUMA> | <RESTA> | <MULTIPLICACION> 	) Expression() Expression1()
		|	LOOKAHEAD(2) <OPCORCHETE> Expression() <CLCORCHETE>  Expression1()
		|	LOOKAHEAD(2) <PUNTO> <LENGTH> Expression1()
		|	LOOKAHEAD(2) <PUNTO> <IDENTIFICADOR> <OPPARENTESIS> ( Expression() ( <COMA> Expression() )* )? <CLPARENTESIS> Expression1()
	)*
}

Simbolo Identifier(String tipoDato, String categoria, int tamanio):{String lexema;}
{
	<IDENTIFICADOR>{
		lexema = token.image; 
		Simbolo s = new Simbolo(lexema, tipoDato, categoria, tamanio);
		if (validate(s)){
			tablaSimbolos.put(s.hashCode(),s);
		}
		
		return s;
	}
}